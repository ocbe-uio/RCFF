on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: check

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1

      - uses: r-lib/actions/setup-pandoc@v1
      
      - name: Install dependencies
        run: |
          sudo apt-get install libcurl4-openssl-dev libgit2-dev libnetcdf-dev libudunits2-dev

      - name: Query dependencies
        run: |
          install.packages('remotes')
          repos <- c("https://cloud.r-project.org","https://rse.pik-potsdam.de/r/packages/")
          saveRDS(remotes::dev_package_deps(dependencies = TRUE, repos=repos), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install R dependencies
        run: |
          repos <- c("https://cloud.r-project.org","https://rse.pik-potsdam.de/r/packages/")
          install.packages(c("remotes"), repos=repos)
          deps <- remotes::dev_package_deps(dependencies = TRUE, repos=repos)
          missing <- deps[is.na(deps$available),]
          if(dim(missing)[1]>0) {
            if (!requireNamespace("BiocManager", quietly = TRUE))  install.packages("BiocManager")
            BiocManager::install(missing$package)
          }
          remotes::install_deps(dependencies = TRUE, repos=repos)
          remotes::install_cran(c("devtools","covr","lucode2"), repos=repos)
        shell: Rscript {0}
        
      - name: Run tests
        run: devtools::test(stop_on_failure = TRUE)
        shell: Rscript {0}

      - name: Test coverage
        run: covr::codecov(quiet = FALSE)
        shell: Rscript {0}
        
      - name: Validation key 
        run: if(!lucode2:::validkey()$valid) stop("Invalid build key!")
        shell: Rscript {0}
        
